from SampledGraph import SampledGraph
import networkx as nx


class SampledGraphKatz(SampledGraph):
    """This class extends SampledGraph class with specified methods for Kats centrality metrics.

    Attributes:
        :param Graph SampledGraph.__init__: input object SampledGraph with Graph object parameter.
        :param float alpha: float tunable parameter. It represents the contribution of the path to the
        importance of a pairwise of nodes. Used in computing Kats centrality.
    """
    def __init__(self, g, failure_probability, a=0.01):
        SampledGraph.__init__(self, g, failure_probability)
        self.alpha = a

    def calculate_scores(self):
        """Computes the Kats centrality indexes for a given graph and with the tunable alpha parameter.

        Returns:
            :returns: kc. Returns the Kats centrality indexes.
            :rtype: set
        """
        kc = nx.katz_centrality(self.graph, self.alpha, beta=0).items()
        return kc

    def sorted_nodes_list(self):
        """Sort the list of graph nodes according to Kats centrality index.

        Returns:
            :returns: full_sorted_node_list. Returns the list of graph nodes sorted by Kats centrality index.
        """
        katz_scores = self.calculate_scores()
        full_sorted_node_list = map(lambda k: k[0], sorted(katz_scores, key=lambda k: k[1], reverse=True))
        return full_sorted_node_list
