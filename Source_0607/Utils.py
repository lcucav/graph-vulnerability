import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import scipy.sparse as sparse
import networkx as nx
import pandas as pd
import operator


class Utils:

    def __init__(self):
        pass

    @staticmethod
    def largest_eigenvalue(g):
        """Computes the largest eigenvalue of the current graph object.
        Args:
            :param Graph g : input object Graph.
        Returns:
            :returns: largest. Returns the largest eigenvalue of the current graph object as set.
            :rtype: set
        """

        adj = sparse.csr_matrix(nx.to_scipy_sparse_matrix(g), dtype=float)
        largest = sparse.linalg.eigsh(adj, k=1)[0][0]
        return largest

    @staticmethod
    def failure_probability(g):
        """Computes the largest eigenvalue of the current graph object.
        Args:
            :param obj g: input object Graph.
        Returns:
            :returns: p. Returns the probability proportional to graph Degree.
            :rtype: dict
        """
        p = {}
        n = []
        d = []
        deg_list = sorted(g.degree(), key=operator.itemgetter(1), reverse=True)
        for k in deg_list:
            n.append(k[0])
            d.append(k[1])
        iterator = 0
        for i in n:
            p[i] = (float(d[iterator]) / d[0])
            # p[i] = (float(d[iterator]) / g.number_of_nodes())
            iterator = iterator + 1
        return p

    @staticmethod
    def plotter(p, d, fail):
        """Plots the graph given a pandas Dataframe.
                Args:
                    :param str p: String of the current path.
                    :param str d: String of the Dataset used.
                    :param list fail: List of failure probabilities
        """
        # p = os.path.dirname(os.getcwd())
        # d = 'Zachary'
        for f in fail:
            df = pd.read_csv(filepath_or_buffer=p + "\Results/%s_%s.csv" % (d, f))
            for col in df:
                if col != 'Percentage' and col != 'Katz_0.00001':
                    plt.plot(df['Percentage'], df[col], marker='*', linestyle='--',
                             linewidth=2, markersize=10, label=col)
            plt.xticks(np.arange(min(df['Percentage']), max(df['Percentage']) + 2, 2.0))
            plt.legend()
            plt.xlabel("Nodes Removed Percentage", size=14)
            plt.ylabel("Largest Eigenvalue Module Variation", size=14)
            # plt.title('Failure Probability p = %s' % f)
            # plt.title('Failure Probability According to Degree: %s ' % d, fontsize=16)
            plt.savefig(p + "\Graphics/%s_%s.png" % (d, f), bbox_inches='tight', dpi=200)
            plt.clf()
