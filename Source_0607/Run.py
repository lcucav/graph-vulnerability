from SampledGraphDegree import SampledGraphDegree
from SampledGraphEigenVector import SampledGraphEigenVector
from SampledGraphKatz import SampledGraphKatz
from Simulation import Simulation
from Utils import Utils
import networkx as nx
import pandas as pd
# from pandas import ExcelWriter


def start(key, value, p):
    """Starting point of the program execution.
            Args:
                :param str key:
                :param str value: Dataset path.
                :param str p: local path.

    """
    graph = nx.read_edgelist(value, comments='%', create_using=nx.Graph(), nodetype=int)

    columns = ['Percentage', 'Degree', 'EigenVector']
    df = pd.DataFrame(columns=columns)
    methods = {'Degree': SampledGraphDegree, 'EigenVector': SampledGraphEigenVector, 'Katz': SampledGraphKatz}

    x = [2 * t for t in range(0, 10)]
    df['Percentage'] = x
    # failure_p = 0.5 DEFAULT
    # failure_p = Utils.failure_probability(graph)
    # failure_p = 0.1
    # failure_p = 0.3
    deg = Utils.failure_probability(graph)
    failure_p = [0.1, 0.3, 0.5, 0.7, deg]
    for fp in failure_p:
        for method in methods:
            if method != 'Katz':
                g = methods[method](graph, fp)
                s = Simulation(g)
                y = s.run_simulation()
                df[method] = y
            else:
                lam = Utils.largest_eigenvalue(graph)
                spectral_radius = 1.0 / lam
                # alpha_values = {'0.1': 0.1 * spectral_radius, '0.5': 0.5 * spectral_radius}
                # 0.00001
                # alpha_values = {'0.00001': 0.00001 * spectral_radius, '0.1': 0.1 * spectral_radius}
                alpha_values = {'0.1': 0.1 * spectral_radius}
                for alpha in alpha_values:
                    g = methods[method](graph, fp, alpha_values[alpha])
                    s = Simulation(g)
                    y = s.run_simulation()
                    mk = method + '_' + alpha
                    df[mk] = y
        # writer = ExcelWriter(p + "\Results/%s.xlsx" % key)
        # df.to_excel(writer, 'Sheet5')
        # writer.save()
        if fp == deg:
            df.to_csv(path_or_buf=(p + "\Results/%s_degree.csv" % key), index=False)
        else:
            df.to_csv(path_or_buf=(p + "\Results/%s_%s.csv" % (key, fp)), index=False)

